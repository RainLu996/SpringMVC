<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--
        注册springMVC的核心对象：DispatcherServlet
        需要在tomcat服务器启动之后创建DispatcherServlet对象的实例。
        在创建DispatcherServlet的实例时，会同时创建springMVC容器对象，然后读取springMVC配置文件，
        把这个配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了。

        servlet的初始化会执行init()方法。DispatcherServlet在init()方法中{
            //创建容器，读取配置文件
            WebApplicationContext ctx = new WebApplicationContext("springmvc.xml");
            //把容器对象放到ServletContext中
            getContextServlet().setAttribute(key,ctx);
        }
    -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!-- 自定义springMVC读取配置文件的位置
                springMVC创建容器对象时，默认读取的配置文件路径是：/WEB-INF/中央调度器别名-servlet.xml
         -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMVC.xml</param-value>
        </init-param>

        <!-- 要想达到在tomcat启动之后创建此对象的目的，需要设置<load-on-startup>
                <load-on-startup>：表示tomcat启动后创建对象的顺序。
                它的值是整数：
                ➢ 当值大于等于 0 时，表示容器在启动时就加载并初始化这个 servlet，数值越小，该 Servlet
                的优先级就越高，其被创建的也就越早；
                ➢ 当值小于 0 或者没有指定时，则表示该 Servlet 在真正被使用时才会去创建。
                ➢ 当值相同时，容器会自己选择创建顺序。
         -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
            <!--
                使用springMVC框架时，<url-pattern>可以使用两种值
                  1）使用扩展名方式，语法：*.xxx， xxx是自定义的扩展名。常用的方式为：*.do, *.action, *.mvc等等
                         只要域名的扩展名为*.xxx结尾的，都需要经过中央调度器调度
                  2）使用“/”
            -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>


    <!--
        解决在【请求过程】中出现乱码的问题————————>使用过滤器
    -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

        <!-- 设置项目中使用的字符编码 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>

        <!-- 强制【请求对象HttpServletRequest】去使用encoding配置的字符编码方式 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>

        <!-- 强制【响应对象HttpServletResponse】去使用encoding配置的字符编码方式 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <!-- /*：强制所有【请求】先通过过滤器处理 -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>












